using System;
using UnityEngine;

public class TileSpawner : MonoBehaviour {
    
    public GameObject tileEmpty;
    public GameObject tileResource;
    public GameObject tileBlocked;
    public GameObject tileHouse;

    private GameObject[] _tiles;
    
    #region Unity Methods

    private void Start() {
        _tiles = new GameObject[541];
        
        for (int row = 0; row < 25; row++) {
            for (int col = 0; col < 25; col++) {
                GameObject tile = GetTile(row, col);

                if (tile != null) {
                    _tiles[row * 10 + col] = Instantiate(GetTile(row, col), GetPosition(row, col), Quaternion.identity);
                }
            }
        }
        StaticBatchingUtility.Combine(_tiles, _tiles[0]);
    }
    
    #endregion

    
    #region Private class methods

    private GameObject GetTile(int row, int col) {
        
        GameObject[,] tiles = {
            { null,         null,         null,         null,         null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null,         null,         null,         null,         null },
            { null,         null,         null,         null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null,         null,         null,         null },
            { null,         null,         null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null,         null,         null },
            { null,         null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null,         null },
            { null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null },
            { null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null },
            { tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileBlocked,  tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileBlocked,  tileBlocked,  tileBlocked,  tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileBlocked,  tileBlocked,  tileHouse,    tileBlocked,  tileBlocked, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileBlocked,  tileBlocked,  tileBlocked,  tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileBlocked,  tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource },
            { tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty },
            { null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null },
            { null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null },
            { null,         null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null,         null },
            { null,         null,         null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null,         null,         null },
            { null,         null,         null,         null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null,         null,         null,         null },
            { null,         null,         null,         null,         null,         null,         tileEmpty,    tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileResource, tileEmpty,    null,         null,         null,         null,         null,         null },
        };
        return tiles[row, col];
    }

    private Vector3 GetPosition(int row, int col) {

        (float x, float z)[,] position = {
            {(-0.48f, 0.48f), (-0.44f, 0.48f), (-0.40f, 0.48f), (-0.36f, 0.48f), (-0.32f, 0.48f), (-0.28f, 0.48f), (-0.24f, 0.48f), (-0.20f, 0.48f), (-0.16f, 0.48f), (-0.12f, 0.48f), (-0.08f, 0.48f), (-0.04f, 0.48f), (-0.00f, 0.48f), (0.04f, 0.48f), (0.08f, 0.48f), (0.12f, 0.48f), (0.16f, 0.48f), (0.20f, 0.48f), (0.24f, 0.48f), (0.28f, 0.48f), (0.32f, 0.48f), (0.36f, 0.48f), (0.40f, 0.48f), (0.44f, 0.48f), (0.48f, 0.48f)}, 
            {(-0.48f, 0.44f), (-0.44f, 0.44f), (-0.40f, 0.44f), (-0.36f, 0.44f), (-0.32f, 0.44f), (-0.28f, 0.44f), (-0.24f, 0.44f), (-0.20f, 0.44f), (-0.16f, 0.44f), (-0.12f, 0.44f), (-0.08f, 0.44f), (-0.04f, 0.44f), (-0.00f, 0.44f), (0.04f, 0.44f), (0.08f, 0.44f), (0.12f, 0.44f), (0.16f, 0.44f), (0.20f, 0.44f), (0.24f, 0.44f), (0.28f, 0.44f), (0.32f, 0.44f), (0.36f, 0.44f), (0.40f, 0.44f), (0.44f, 0.44f), (0.48f, 0.44f)}, 
            {(-0.48f, 0.40f), (-0.44f, 0.40f), (-0.40f, 0.40f), (-0.36f, 0.40f), (-0.32f, 0.40f), (-0.28f, 0.40f), (-0.24f, 0.40f), (-0.20f, 0.40f), (-0.16f, 0.40f), (-0.12f, 0.40f), (-0.08f, 0.40f), (-0.04f, 0.40f), (-0.00f, 0.40f), (0.04f, 0.40f), (0.08f, 0.40f), (0.12f, 0.40f), (0.16f, 0.40f), (0.20f, 0.40f), (0.24f, 0.40f), (0.28f, 0.40f), (0.32f, 0.40f), (0.36f, 0.40f), (0.40f, 0.40f), (0.44f, 0.40f), (0.48f, 0.40f)},
            {(-0.48f, 0.36f), (-0.44f, 0.36f), (-0.40f, 0.36f), (-0.36f, 0.36f), (-0.32f, 0.36f), (-0.28f, 0.36f), (-0.24f, 0.36f), (-0.20f, 0.36f), (-0.16f, 0.36f), (-0.12f, 0.36f), (-0.08f, 0.36f), (-0.04f, 0.36f), (-0.00f, 0.36f), (0.04f, 0.36f), (0.08f, 0.36f), (0.12f, 0.36f), (0.16f, 0.36f), (0.20f, 0.36f), (0.24f, 0.36f), (0.28f, 0.36f), (0.32f, 0.36f), (0.36f, 0.36f), (0.40f, 0.36f), (0.44f, 0.36f), (0.48f, 0.36f)},
            {(-0.48f, 0.32f), (-0.44f, 0.32f), (-0.40f, 0.32f), (-0.36f, 0.32f), (-0.32f, 0.32f), (-0.28f, 0.32f), (-0.24f, 0.32f), (-0.20f, 0.32f), (-0.16f, 0.32f), (-0.12f, 0.32f), (-0.08f, 0.32f), (-0.04f, 0.32f), (-0.00f, 0.32f), (0.04f, 0.32f), (0.08f, 0.32f), (0.12f, 0.32f), (0.16f, 0.32f), (0.20f, 0.32f), (0.24f, 0.32f), (0.28f, 0.32f), (0.32f, 0.32f), (0.36f, 0.32f), (0.40f, 0.32f), (0.44f, 0.32f), (0.48f, 0.32f)},
            {(-0.48f, 0.28f), (-0.44f, 0.28f), (-0.40f, 0.28f), (-0.36f, 0.28f), (-0.32f, 0.28f), (-0.28f, 0.28f), (-0.24f, 0.28f), (-0.20f, 0.28f), (-0.16f, 0.28f), (-0.12f, 0.28f), (-0.08f, 0.28f), (-0.04f, 0.28f), (-0.00f, 0.28f), (0.04f, 0.28f), (0.08f, 0.28f), (0.12f, 0.28f), (0.16f, 0.28f), (0.20f, 0.28f), (0.24f, 0.28f), (0.28f, 0.28f), (0.32f, 0.28f), (0.36f, 0.28f), (0.40f, 0.28f), (0.44f, 0.28f), (0.48f, 0.28f)},
            {(-0.48f, 0.24f), (-0.44f, 0.24f), (-0.40f, 0.24f), (-0.36f, 0.24f), (-0.32f, 0.24f), (-0.28f, 0.24f), (-0.24f, 0.24f), (-0.20f, 0.24f), (-0.16f, 0.24f), (-0.12f, 0.24f), (-0.08f, 0.24f), (-0.04f, 0.24f), (-0.00f, 0.24f), (0.04f, 0.24f), (0.08f, 0.24f), (0.12f, 0.24f), (0.16f, 0.24f), (0.20f, 0.24f), (0.24f, 0.24f), (0.28f, 0.24f), (0.32f, 0.24f), (0.36f, 0.24f), (0.40f, 0.24f), (0.44f, 0.24f), (0.48f, 0.24f)},
            {(-0.48f, 0.20f), (-0.44f, 0.20f), (-0.40f, 0.20f), (-0.36f, 0.20f), (-0.32f, 0.20f), (-0.28f, 0.20f), (-0.24f, 0.20f), (-0.20f, 0.20f), (-0.16f, 0.20f), (-0.12f, 0.20f), (-0.08f, 0.20f), (-0.04f, 0.20f), (-0.00f, 0.20f), (0.04f, 0.20f), (0.08f, 0.20f), (0.12f, 0.20f), (0.16f, 0.20f), (0.20f, 0.20f), (0.24f, 0.20f), (0.28f, 0.20f), (0.32f, 0.20f), (0.36f, 0.20f), (0.40f, 0.20f), (0.44f, 0.20f), (0.48f, 0.20f)},
            {(-0.48f, 0.16f), (-0.44f, 0.16f), (-0.40f, 0.16f), (-0.36f, 0.16f), (-0.32f, 0.16f), (-0.28f, 0.16f), (-0.24f, 0.16f), (-0.20f, 0.16f), (-0.16f, 0.16f), (-0.12f, 0.16f), (-0.08f, 0.16f), (-0.04f, 0.16f), (-0.00f, 0.16f), (0.04f, 0.16f), (0.08f, 0.16f), (0.12f, 0.16f), (0.16f, 0.16f), (0.20f, 0.16f), (0.24f, 0.16f), (0.28f, 0.16f), (0.32f, 0.16f), (0.36f, 0.16f), (0.40f, 0.16f), (0.44f, 0.16f), (0.48f, 0.16f)},
            {(-0.48f, 0.12f), (-0.44f, 0.12f), (-0.40f, 0.12f), (-0.36f, 0.12f), (-0.32f, 0.12f), (-0.28f, 0.12f), (-0.24f, 0.12f), (-0.20f, 0.12f), (-0.16f, 0.12f), (-0.12f, 0.12f), (-0.08f, 0.12f), (-0.04f, 0.12f), (-0.00f, 0.12f), (0.04f, 0.12f), (0.08f, 0.12f), (0.12f, 0.12f), (0.16f, 0.12f), (0.20f, 0.12f), (0.24f, 0.12f), (0.28f, 0.12f), (0.32f, 0.12f), (0.36f, 0.12f), (0.40f, 0.12f), (0.44f, 0.12f), (0.48f, 0.12f)},
            {(-0.48f, 0.08f), (-0.44f, 0.08f), (-0.40f, 0.08f), (-0.36f, 0.08f), (-0.32f, 0.08f), (-0.28f, 0.08f), (-0.24f, 0.08f), (-0.20f, 0.08f), (-0.16f, 0.08f), (-0.12f, 0.08f), (-0.08f, 0.08f), (-0.04f, 0.08f), (-0.00f, 0.08f), (0.04f, 0.08f), (0.08f, 0.08f), (0.12f, 0.08f), (0.16f, 0.08f), (0.20f, 0.08f), (0.24f, 0.08f), (0.28f, 0.08f), (0.32f, 0.08f), (0.36f, 0.08f), (0.40f, 0.08f), (0.44f, 0.08f), (0.48f, 0.08f)},
            {(-0.48f, 0.04f), (-0.44f, 0.04f), (-0.40f, 0.04f), (-0.36f, 0.04f), (-0.32f, 0.04f), (-0.28f, 0.04f), (-0.24f, 0.04f), (-0.20f, 0.04f), (-0.16f, 0.04f), (-0.12f, 0.04f), (-0.08f, 0.04f), (-0.04f, 0.04f), (-0.00f, 0.04f), (0.04f, 0.04f), (0.08f, 0.04f), (0.12f, 0.04f), (0.16f, 0.04f), (0.20f, 0.04f), (0.24f, 0.04f), (0.28f, 0.04f), (0.32f, 0.04f), (0.36f, 0.04f), (0.40f, 0.04f), (0.44f, 0.04f), (0.48f, 0.04f)},
            {(-0.48f, 0.00f), (-0.44f, 0.00f), (-0.40f, 0.00f), (-0.36f, 0.00f), (-0.32f, 0.00f), (-0.28f, 0.00f), (-0.24f, 0.00f), (-0.20f, 0.00f), (-0.16f, 0.00f), (-0.12f, 0.00f), (-0.08f, 0.00f), (-0.04f, 0.00f), (-0.00f, 0.00f), (0.04f, 0.00f), (0.08f, 0.00f), (0.12f, 0.00f), (0.16f, 0.00f), (0.20f, 0.00f), (0.24f, 0.00f), (0.28f, 0.00f), (0.32f, 0.00f), (0.36f, 0.00f), (0.40f, 0.00f), (0.44f, 0.00f), (0.48f, 0.00f)},
            {(-0.48f, -0.04f), (-0.44f, -0.04f), (-0.40f, -0.04f), (-0.36f, -0.04f), (-0.32f, -0.04f), (-0.28f, -0.04f), (-0.24f, -0.04f), (-0.20f, -0.04f), (-0.16f, -0.04f), (-0.12f, -0.04f), (-0.08f, -0.04f), (-0.04f, -0.04f), (-0.00f, -0.04f), (0.04f, -0.04f), (0.08f, -0.04f), (0.12f, -0.04f), (0.16f, -0.04f), (0.20f, -0.04f), (0.24f, -0.04f), (0.28f, -0.04f), (0.32f, -0.04f), (0.36f, -0.04f), (0.40f, -0.04f), (0.44f, -0.04f), (0.48f, -0.04f)},
            {(-0.48f, -0.08f), (-0.44f, -0.08f), (-0.40f, -0.08f), (-0.36f, -0.08f), (-0.32f, -0.08f), (-0.28f, -0.08f), (-0.24f, -0.08f), (-0.20f, -0.08f), (-0.16f, -0.08f), (-0.12f, -0.08f), (-0.08f, -0.08f), (-0.04f, -0.08f), (-0.00f, -0.08f), (0.04f, -0.08f), (0.08f, -0.08f), (0.12f, -0.08f), (0.16f, -0.08f), (0.20f, -0.08f), (0.24f, -0.08f), (0.28f, -0.08f), (0.32f, -0.08f), (0.36f, -0.08f), (0.40f, -0.08f), (0.44f, -0.08f), (0.48f, -0.08f)},
            {(-0.48f, -0.12f), (-0.44f, -0.12f), (-0.40f, -0.12f), (-0.36f, -0.12f), (-0.32f, -0.12f), (-0.28f, -0.12f), (-0.24f, -0.12f), (-0.20f, -0.12f), (-0.16f, -0.12f), (-0.12f, -0.12f), (-0.08f, -0.12f), (-0.04f, -0.12f), (-0.00f, -0.12f), (0.04f, -0.12f), (0.08f, -0.12f), (0.12f, -0.12f), (0.16f, -0.12f), (0.20f, -0.12f), (0.24f, -0.12f), (0.28f, -0.12f), (0.32f, -0.12f), (0.36f, -0.12f), (0.40f, -0.12f), (0.44f, -0.12f), (0.48f, -0.12f)},
            {(-0.48f, -0.16f), (-0.44f, -0.16f), (-0.40f, -0.16f), (-0.36f, -0.16f), (-0.32f, -0.16f), (-0.28f, -0.16f), (-0.24f, -0.16f), (-0.20f, -0.16f), (-0.16f, -0.16f), (-0.12f, -0.16f), (-0.08f, -0.16f), (-0.04f, -0.16f), (-0.00f, -0.16f), (0.04f, -0.16f), (0.08f, -0.16f), (0.12f, -0.16f), (0.16f, -0.16f), (0.20f, -0.16f), (0.24f, -0.16f), (0.28f, -0.16f), (0.32f, -0.16f), (0.36f, -0.16f), (0.40f, -0.16f), (0.44f, -0.16f), (0.48f, -0.16f)},
            {(-0.48f, -0.20f), (-0.44f, -0.20f), (-0.40f, -0.20f), (-0.36f, -0.20f), (-0.32f, -0.20f), (-0.28f, -0.20f), (-0.24f, -0.20f), (-0.20f, -0.20f), (-0.16f, -0.20f), (-0.12f, -0.20f), (-0.08f, -0.20f), (-0.04f, -0.20f), (-0.00f, -0.20f), (0.04f, -0.20f), (0.08f, -0.20f), (0.12f, -0.20f), (0.16f, -0.20f), (0.20f, -0.20f), (0.24f, -0.20f), (0.28f, -0.20f), (0.32f, -0.20f), (0.36f, -0.20f), (0.40f, -0.20f), (0.44f, -0.20f), (0.48f, -0.20f)},
            {(-0.48f, -0.24f), (-0.44f, -0.24f), (-0.40f, -0.24f), (-0.36f, -0.24f), (-0.32f, -0.24f), (-0.28f, -0.24f), (-0.24f, -0.24f), (-0.20f, -0.24f), (-0.16f, -0.24f), (-0.12f, -0.24f), (-0.08f, -0.24f), (-0.04f, -0.24f), (-0.00f, -0.24f), (0.04f, -0.24f), (0.08f, -0.24f), (0.12f, -0.24f), (0.16f, -0.24f), (0.20f, -0.24f), (0.24f, -0.24f), (0.28f, -0.24f), (0.32f, -0.24f), (0.36f, -0.24f), (0.40f, -0.24f), (0.44f, -0.24f), (0.48f, -0.24f)},
            {(-0.48f, -0.28f), (-0.44f, -0.28f), (-0.40f, -0.28f), (-0.36f, -0.28f), (-0.32f, -0.28f), (-0.28f, -0.28f), (-0.24f, -0.28f), (-0.20f, -0.28f), (-0.16f, -0.28f), (-0.12f, -0.28f), (-0.08f, -0.28f), (-0.04f, -0.28f), (-0.00f, -0.28f), (0.04f, -0.28f), (0.08f, -0.28f), (0.12f, -0.28f), (0.16f, -0.28f), (0.20f, -0.28f), (0.24f, -0.28f), (0.28f, -0.28f), (0.32f, -0.28f), (0.36f, -0.28f), (0.40f, -0.28f), (0.44f, -0.28f), (0.48f, -0.28f)},
            {(-0.48f, -0.32f), (-0.44f, -0.32f), (-0.40f, -0.32f), (-0.36f, -0.32f), (-0.32f, -0.32f), (-0.28f, -0.32f), (-0.24f, -0.32f), (-0.20f, -0.32f), (-0.16f, -0.32f), (-0.12f, -0.32f), (-0.08f, -0.32f), (-0.04f, -0.32f), (-0.00f, -0.32f), (0.04f, -0.32f), (0.08f, -0.32f), (0.12f, -0.32f), (0.16f, -0.32f), (0.20f, -0.32f), (0.24f, -0.32f), (0.28f, -0.32f), (0.32f, -0.32f), (0.36f, -0.32f), (0.40f, -0.32f), (0.44f, -0.32f), (0.48f, -0.32f)},
            {(-0.48f, -0.36f), (-0.44f, -0.36f), (-0.40f, -0.36f), (-0.36f, -0.36f), (-0.32f, -0.36f), (-0.28f, -0.36f), (-0.24f, -0.36f), (-0.20f, -0.36f), (-0.16f, -0.36f), (-0.12f, -0.36f), (-0.08f, -0.36f), (-0.04f, -0.36f), (-0.00f, -0.36f), (0.04f, -0.36f), (0.08f, -0.36f), (0.12f, -0.36f), (0.16f, -0.36f), (0.20f, -0.36f), (0.24f, -0.36f), (0.28f, -0.36f), (0.32f, -0.36f), (0.36f, -0.36f), (0.40f, -0.36f), (0.44f, -0.36f), (0.48f, -0.36f)},
            {(-0.48f, -0.40f), (-0.44f, -0.40f), (-0.40f, -0.40f), (-0.36f, -0.40f), (-0.32f, -0.40f), (-0.28f, -0.40f), (-0.24f, -0.40f), (-0.20f, -0.40f), (-0.16f, -0.40f), (-0.12f, -0.40f), (-0.08f, -0.40f), (-0.04f, -0.40f), (-0.00f, -0.40f), (0.04f, -0.40f), (0.08f, -0.40f), (0.12f, -0.40f), (0.16f, -0.40f), (0.20f, -0.40f), (0.24f, -0.40f), (0.28f, -0.40f), (0.32f, -0.40f), (0.36f, -0.40f), (0.40f, -0.40f), (0.44f, -0.40f), (0.48f, -0.40f)},
            {(-0.48f, -0.44f), (-0.44f, -0.44f), (-0.40f, -0.44f), (-0.36f, -0.44f), (-0.32f, -0.44f), (-0.28f, -0.44f), (-0.24f, -0.44f), (-0.20f, -0.44f), (-0.16f, -0.44f), (-0.12f, -0.44f), (-0.08f, -0.44f), (-0.04f, -0.44f), (-0.00f, -0.44f), (0.04f, -0.44f), (0.08f, -0.44f), (0.12f, -0.44f), (0.16f, -0.44f), (0.20f, -0.44f), (0.24f, -0.44f), (0.28f, -0.44f), (0.32f, -0.44f), (0.36f, -0.44f), (0.40f, -0.44f), (0.44f, -0.44f), (0.48f, -0.44f)},
            {(-0.48f, -0.48f), (-0.44f, -0.48f), (-0.40f, -0.48f), (-0.36f, -0.48f), (-0.32f, -0.48f), (-0.28f, -0.48f), (-0.24f, -0.48f), (-0.20f, -0.48f), (-0.16f, -0.48f), (-0.12f, -0.48f), (-0.08f, -0.48f), (-0.04f, -0.48f), (-0.00f, -0.48f), (0.04f, -0.48f), (0.08f, -0.48f), (0.12f, -0.48f), (0.16f, -0.48f), (0.20f, -0.48f), (0.24f, -0.48f), (0.28f, -0.48f), (0.32f, -0.48f), (0.36f, -0.48f), (0.40f, -0.48f), (0.44f, -0.48f), (0.48f, -0.48f)}, 
        };
        
        return new Vector3(position[row, col].x, 0.7317f, position[row, col].z);
    }
    
    #endregion
}
